1) Install Docker 
	docker install ubuntu 

2) Create a Docker hub account 
	Login to your hub account  in the host machine 
		docker login 

3) Pull and try a sample image 
	a. docker pull ubuntu 
	b. docker pull jenkins/jenkins:lts

4) List the existing local images 
	docker images 

5) Try to create a container out of pulled image
	a. docker run -it -d ubuntu /bin/bash 
	b. create a directory /home/ubuntu/jenkins_home with 777 permission and run below command 
	c. docker run -it -d --name jenkins -p 8080:8080 -p 50000:50000 -v /home/ubuntu/jenkins_home:/var/jenkins_home jenkins/jenkins:lts

6) List containers 
	docker ps 
		(or)
	docker container ls 

7) To get Jenkins admin password 
	docker logs <container_id / container_name> 
	ex: docker logs jenkins 


Docker 
	Docker is one of the tools that used the idea of the isolated resources to 
	create a container that allows applications to be packaged with all the 
	dependencies installed and ran wherever we wanted.
	
	Docker can only run on Linux machines this means I cant install Docker directly on Windows or any other OS.
	If I want install Docker on windows then I need to run a Linux VM in windows on top that I need to run Docker.

Virtualization (VM)
	- VM is way of running virtual OS on top a host OS using a special software called Hypervisor.
	- VM directly shares the hardware of the host OS. 

					VM 					vs 			Containerisation 
	1. Virtualization at hardware level  		1. Virtualization at OS level 
	2. Heavyweight - consume more host 			2. Lightweight
	   resources 	
	3. VM uses hypervisor 						3. containerisation tool is used 
	4. limited performance - Boot up time       4. Native performance - usually boot 
		is more which is in minutes 	           fast in seconds.
	5. Consumes more storage 		        	5. Shares OS storage means only uses 
							   						required storage.
	6. Supports all OS 							6. Supports on Linux

host machine 
	This is the machine in which docker is running 

Docker images 
	List images 
		docker images 
		docker image ls 

	Delete images 
		docker rmi <image_name>:<tag>	
		docker rmi <image_id>

	Download an image 	
		docker pull <image_id>


	Create upload a image to docker registry 
		1. Connect to the regisrty account 
				docker login 

		2. Have a image with the private registry syntax 
				docker tag <old_image> <username>/<repo_name>:<tag>
				ex: docker tag ubuntu:latest harshajain/test_repo:v1

		3. Push the image to your regisrty 
				docker push <username>/<repo_name>:<tag>	

	Get only images ids 
		docker images -q 

	Delete all the images 
		docker rmi $(docker images -q)
		docker images -q | xargs -I{} docker rmi {}

	To force delete images 
		docker rmi -f <image_id>	
		docker rmi --force <image_id>	


Docker container 
	- A container is a set of isolated processes and its resources in a host machine which is isolated from all the other process. 
	- Docker uses Linux features to achieve isolation by using namespaces, which allows processes to access only resources in that particular namespace, which allows having a process tree means set 
	of processes that is completely independent of the rest of the systems processes and other processes.
	
	Docker definition: A container is a standard unit of software that packages 
	up code and all its dependencies so the application runs quickly and reliably 
	from one computing environment to another.

	List running containers 
		docker ps
		docker container ls	

	List all the containers 
		docker ps -a
	
	List only stopped 
		docker ps --filter "status=exited"

	To stop, start, restart, pause containers 	

		docker stop <container_id1> <container_id2> .... <container_idn>
		docker start <container_id1> <container_id2> .... <container_idn>
		docker restart <container_id1> <container_id2> .... <container_idn>
		docker pause <container_id1> <container_id2> .... <container_idn>

	Delete stopped container 
		docker rm <container_id>

	To stop and delete all the running containers 
		docker rm $(docker stop $(docker ps -q))

	Delete all stopped container 
		docker rm $(docker ps --filter "status=exited" -q)

	Delete a running container 
		1. Stop the container first 
			docker stop <container_id>
		2. Then delete the container 
			docker rm <container_id>		
			
		smater way:  docker rm $(docker stop <container_id>)
				
	
	Create container from image (Run a container from image)
		docker run -it -d --name <container_name> <image>
			-i - Interactive mode 
			-t - enable tty in the terminal 
			-d - To create container in detached mode (in background)
			--name - To assign a custom name to the container 


	To check the resource utilized by all the container 
		docker stats 		
			
	To list all the process running inside a container
		docker top <container_id>

	How to login to a container 
		1. To attach to a container 
			docker attach <container_id>
			(To safely exit: hold ctrl + (QP))

		2. To use exec to create a new shell 
			docker exec -it <container_id> /bin/bash	


	To check the log of all the output process of container 
		docker logs <container_id>	

Assignment: Today's demo 	
				1. push a image to your own docker repository 
				2. create a container from the above image 
				3. Login to the container and install some tools 

			How to copy files / directories from 
				1. host machine to container 
				2. container to host machine 




